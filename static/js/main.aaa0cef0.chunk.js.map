{"version":3,"sources":["Components/testButton.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","props","handleClick","bind","state","title","result","this","randomValue","console","log","setState","array","Math","floor","random","length","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA+BeA,E,kDA5Bd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,MAAQ,CAAEC,MAAO,IAHJ,E,0DAOlB,IAOIC,EAASC,KAAKC,YAPD,CAAC,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,SAAU,QAAS,OAAQ,SAAU,QAAS,QAAS,OAAQ,QAAS,WAAY,OAAQ,QAAS,cAAe,kBAAmB,UAAW,UAAW,QAAS,QAAS,SAAU,UAAW,UAAW,UAAW,YAAa,aAAc,WAAY,aAAc,UAAW,iBAO5V,IAAMD,KAAKC,YAL3C,CAAC,SAAU,QAAS,SAAU,OAAQ,UAAW,MAAO,WAAY,UAAW,cAAe,YAAa,SAAU,SAAU,QAAS,kBAAmB,QAAS,aAAc,QAAS,UAAW,SAAU,YAAa,YAAa,MAAO,WAAY,UAAW,aAAc,WAAY,aAKjSD,QACbE,QAAQC,IAAIJ,GACZC,KAAKI,SAAS,CAAEN,MAAOC,M,kCAIZM,GACX,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,W,+BAG9C,OAAO,oCAAE,4BAAQC,QAASV,KAAKL,aAAtB,kBAAF,IAA6D,4BAAKK,KAAKH,MAAMC,Y,GAzBjEa,IAAMC,W,MCcZC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kDAGA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.aaa0cef0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nclass Toggle extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t\tthis.state = { title: '' }\n\t}\n\n\thandleClick() {\n\t\tvar adjectives = [\"Modern\", \"Boho\", \"Simple\", \"Quiet\", \"Quirky\", \"Rustic\", \"Classic\", \"90's\", \"80's\", \"70's\", \"2000's\", \"Retro\", \"Chic\", \"Spacey\", \"Urban\", \"Rural\", \"Oaky\", \"Surfy\", \"Carnival\", \"Ugly\", \"Vegan\", \"Apocalyptic\", \"Family-Friendly\", \"Healthy\", \"Hipster\", \"Royal\", \"Greek\", \"Hippie\", \"Arabian\", \"Western\", \"Outdoor\", \"Caribbean\", \"Futuristic\", \"Parisian\", \"Co-working\", \"Student\", \"Eco-Friendly\"];\n\n\t\tvar nouns = [\"Safari\", \"Beach\", \"Garden\", \"Neon\", \"Rooftop\", \"Cat\", \"Boatshed\", \"Country\", \"Oktoberfest\", \"Chocolate\", \"Disney\", \"Health\", \"Vegan\", \"Family-Friendly\", \"Child\", \"Playground\", \"Disco\", \"Turkish\", \"Pirate\", \"Star Wars\", \"Apres Ski\", \"BBQ\", \"Festival\", \"Student\", \"Co-working\", \"Sidewalk\", \"Takeaway\"];\n\n\t\tvar cafeTypes = [\"Bakery\", \"Restaurant\", \"Shop\", \"Cafeteria\", \"Buffet\", \"Tea Rooms\", \"Tea Shop\", \"Bistro\", \"Wine Bar\", \"Bar\", \"Pub\", \"Eatery\", \"Caf\", \"Coffee House\", \"Tavern\"];\n\n\t\t//ensure adj != noun\n\t\tvar result = this.randomValue(adjectives) + \" \" + this.randomValue(nouns) + \" \" + 'Cafe';\n\t\tconsole.log(result);\n\t\tthis.setState({ title: result });\n\t\t//if you click on the option it stays static?\n\t}\n\n\trandomValue(array) {\n\t\treturn array[Math.floor(Math.random() * array.length)];\n\t}\n\trender() {\n\t\treturn <><button onClick={this.handleClick}>Generate Ideas</button> <h3>{this.state.title}</h3></>;\n\t}\n}\n\nexport default Toggle","import React from 'react';\nimport Toggle from './Components/testButton.js';\n\nimport './Styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>\n        Cafe Idea Generator\n        </p>\n      <Toggle />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}